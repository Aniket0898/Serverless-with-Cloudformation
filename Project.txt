Create an AWS CloudFormation template (YML or JSON) to manage the following resources:

1. S3 Bucket for code artifact.
2. Two Lambda functions with name "Public" and "Private". Code should be a zip in the S3 
Bucket created above. You can choose the runtime of your choice.
3. An API Gateway with 2 routes /public and /private. The route should forward requests to 
different Lambda functions created above.
4. Amazon Dynamo DB table. With "User ID" as Hash Key/Partition Key
5. The Public Lambda has permission to only read from the table. The Private Lambda can read 
and write records.

Access key : AKIAXFQQQUFAE6LNXVF3
Secret Access key : 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



*********************************************************************************************************

s3 stack :
s3 bucketname :


Resources:
  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties: 
      ApiKeySourceType: String
      BinaryMediaTypes: 
        - String
      Body: Json
      BodyS3Location: 
          S3Location
      CloneFrom: String
      Description: String
      DisableExecuteApiEndpoint: Boolean
      EndpointConfiguration: 
        EndpointConfiguration
      FailOnWarnings: Boolean
      MinimumCompressionSize: Integer
        Mode: String
      Name: String
      Parameters: 
      Key : Value
      Policy: Json
      Tags: 
        - Tag





LambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        ZipFile: |
          console.log('Loading DynamoDB Lambda function');
          var AWS = require('aws-sdk');
          var dynamo = new AWS.DynamoDB.DocumentClient();
          exports.handler = function(event, context, callback) {
          //console.log('Received event:', JSON.stringify(event, null, 2));
          var operation = event.operation;
          if (event.tableName) {
            event.payload.TableName = event.tableName;
          }
          switch (operation) {
                case 'create':
                    dynamo.put(event.payload, callback);
                    break;
                case 'read':
                    dynamo.get(event.payload, callback);
                    break;
                case 'update':
                    dynamo.update(event.payload, callback);
                    break;
                case 'delete':
                    dynamo.delete(event.payload, callback);
                    break;
                case 'list':
                    dynamo.scan(event.payload, callback);
                    break;
                default:
                    callback('Unknown operation: ${operation}');
          }
          };
      FunctionName:
        Ref: LambdaFuncName
      Handler: index.handler
      Runtime: nodejs12.x
      Role: !GetAtt IAMRole.Arn
    DependsOn:
      - DynamoDBTable







  lambdaApiGatewayInvoke:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt lambdaFunction.Arn
      Principal: apigateway.amazonaws.com
      # note: if route *not* at API Gateway root, `SourceArn` would take the form of:
      #               arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${apiGateway}/${apiGatewayStageName}/${apiGatewayHTTPMethod}/PATH_PART
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${apiGateway}/${apiGatewayStageName}/${apiGatewayHTTPMethod}/



  lambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${lambdaFunctionName}
      RetentionInDays: 90

Outputs:
  apiGatewayInvokeURL:
    Value: !Sub https://${apiGateway}.execute-api.${AWS::Region}.amazonaws.com/${apiGatewayStageName}

  lambdaArn:
    Value: !GetAtt lambdaFunction.Arn
      




APIGatewayResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref APIGatewayRestAPI
      ParentId: !GetAtt
        - APIGatewayRestAPI
        - RootResourceId
      PathPart:
        Ref: LambdaFuncName
    DependsOn:
      - APIGatewayRestAPI
  APIGatewayMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref APIGatewayRestAPI
      ResourceId: !Ref APIGatewayResource
      HttpMethod: POST
      AuthorizationType: NONE
      MethodResponses:
        - StatusCode: 200
      Integration:
        Type: AWS
        IntegrationResponses:
          - StatusCode: 200
        IntegrationHttpMethod: POST
        Uri: !Sub
          - >-
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFuncNameArn}/invocations
          - LambdaFuncNameArn: !GetAtt LambdaFunction.Arn
    DependsOn:
      - APIGatewayResource
  APIGatewayDeployment:
    Type: 'AWS::ApiGateway::Deployment'
    Properties:
      RestApiId: !Ref APIGatewayRestAPI
      StageName:
        Ref: EnvironmentName
    DependsOn:
      - APIGatewayMethod
  APIGatewayPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt LambdaFunction.Arn
      Principal: apigateway.amazonaws.com
    DependsOn:
      - APIGatewayDeployment
  IAMRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: Policy_api-lambda-db
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'dynamodb:BatchGetItem'
                  - 'dynamodb:BatchWriteItem'
                  - 'dynamodb:TagResource'
                  - 'dynamodb:UntagResource'
                  - 'dynamodb:PutItem'
                  - 'dynamodb:DeleteItem'
                  - 'dynamodb:GetItem'
                  - 'dynamodb:Scan'
                  - 'dynamodb:Query'
                  - 'dynamodb:UpdateItem'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'logs:CreateLogStream'
                  - 'logs:CreateLogGroup'
                  - 'logs:PutLogEvents'
                Resource: '*'
Parameters:
  LambdaFuncName:
    Type: String
    Default: Lambda_api-lambda-db
  DynamoDBTableName:
    Type: String
    Default: Dynamo_api-lambda-db
  APIName:
    Type: String
    Default: API_api-lambda-db
  EnvironmentName:
    Type: String
    Default: Prod


















## Private vpc
        VpcConfig:
        SecurityGroupIds:
          - sg-077bc4b3d7d1de2f8
        SubnetIds:
          - subnet-0ce43f687f3221722
          - subnet-00a7bd42288218ddc
          - subnet-0591aeb53f7044070

